/**
 * Schema representing Dynamic Form Template details.
 * The Form template contains Sections, sections in turn contain attributes.
 * Sections can be predefined dataset or dynamic data.
 *   -  predefined sections can be vitals, cchpi, medicalhistory, allergies, alerts, orders
 *	 -  dynamic data attributes are of following type Label, Heading, Input, DateField, CheckBox, RadioButton, ComboSelect, Image, Switch, TextArea.
 * See {@tutorial form-tutorial} for an overview.
 *
 * @module FormTempalte
 */
// import the necessary modules
var mongoose = require('mongoose');
var resuable = require('../framework/reusableobjects');

var Schema = mongoose.Schema;
// create an export function to encapsulate the model creation

var FormAttributeSchema = new Schema({
    /** name given to the section */
    name: { type: String, required: true },
    /** attribute type {String } - enum values - combo box select */
    attributetype: {
        type: String,
        enum: ['LABEL', 'HEADING', 'INPUTFIELD', 'DATEFIELD', 'DATETIMEFIELD', 'CHECKBOX', 'RADIOBUTTON', 'COMBOSELECT', 'IMAGE', 'SWITCH', 'TEXTAREA', 'CHECKLISTTEXT'],
        required: true
    },
    /** refdomaincode {ObjectId} - will be used for ComboSelect */
    refdomainuid: { type: Schema.ObjectId, ref: 'ReferenceDomain' },
    /** imagemasteruid {ObjectId} - will be used in case of Image display */
    imagemasteruid: { type: Schema.ObjectId, ref: 'ImageLibrary' },
    /** displaytext {String} - text to be displayed */
    displaytext: String,
    /** locallanguagetext {String} - local language text */
    locallangtext: String,
    /** ismandatory {Boolean} - whether this attribute is mandatory or not */
    ismandatory: Boolean,
    /** isflexiblewidth {Boolean} - if true then flex class will apply */
    isflexiblewidth: Boolean,
    /** widthpercentage {Number} - field width percentage */
    widthpercentage: Number,
    /** displaytextwidthpercentage {Number} - display text width percentage */
    displaytextwidthpercentage: Number,
    /** defaultvalue {String} - Value to be defaulted */
    defaultvalue: String,
    /** scripts {String} - will be used to change the Value & Visibility of the data attribute */
    scripts: String
});

var FormSectionSchema = new Schema({
    /** name given to the section */
    name: { type: String, required: true },
    /** sectiontype : {String} - enum values - predefined or dynamic - default value ' dynamic' */
    sectiontype: { type: String, enum: ['DYNAMIC', 'PREDEFINED'], required: true },
    /** layout {String} - enum values row or column  - combo select - default value 'column'*/
    layouttype: { type: String, enum: ['ROW', 'COLUMN'], required: true },
    /** predefinedataset {String} - enum values - 'CCHPI', 'MEDICALHISTORY, etc - combo box select */
    predefineddataset: {
        type: String,
        enum: ['CCHPI', 'MEDICALHISTORY', 'ALLERGIES', 'ALERTS', 'VITALSIGN', 'PATIENTDATA', 'ORDER', null]
    },
    /** attributes - {attributesschema} - array */
    attributes: [FormAttributeSchema]
});

// define schema
var FormTemplateSchema = new Schema({
    /** Code {string} has to be unique - to be autogenerated using sequence number*/
    code: { type: String, required: true, index: true },
    /** Name {string} defines the  name given for the form template*/
    name: { type: String, required: true, index: true },
    /** description {string} - comments or text with additional details */
    description: String,
    /** locallangdesc {String} - local language for the form template*/
    locallangdesc: String,
    /** activefrom {Date} - start date for the form template */
    activefrom: Date,
    /** activeto {Date} - end date or expiry date for the form template. */
    activeto: Date,
    /** formtypeuid {ObjectId} - reference domain - FORMTY */
    formtypeuid: { type: Schema.ObjectId, ref: 'ReferenceValue', required: true },
    /** versionnumber {Number} - to be auto incremented for each edit */
    versionnumber: Number,
    /** ispublished {Boolean} - whether the form is published to use by other users */
    ispublished: Boolean,
    /** formtitle {String} - if this is set then the title will be displayed at the top */
    formtitle: String,
    /** font {String} - the font family that needs to be used - need to provide list of 5 font types. */
    font: String,
    /** isconfidential {Boolean} - whether this form is confidential or open to all */
    isconfidential: Boolean,
    /** alldepartments {Boolean} - whether open to all departments in the hospital */
    alldepartments: Boolean,
    /** restrictdepartments [{ObjectId}] - uid of departments to be restricted to */
    restrictdepartments: [{
        departmentuid: { type: Schema.ObjectId, ref: 'Department' }
    }],
    /** FormSections  {FormSectionSchema}] - array of form sections. */
    formsections: [FormSectionSchema]
});

FormTemplateSchema.plugin(resuable);

module.exports = mongoose.model('FormTemplate', FormTemplateSchema);