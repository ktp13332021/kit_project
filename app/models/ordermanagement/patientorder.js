
// import the necessary modules
var mongoose = require('mongoose');
var resuable = require('../framework/reusableobjects');
var patientorderitem = require('./patientorderitem');

var Schema = mongoose.Schema;





  // define schema
  var PatientOrderSchema = new Schema({
      /** patientuid {ObjectId} reference to the patient schema */
      patientuid : {type : Schema.ObjectId,ref : 'Patient', required:true, index: true},
      /** paitientvisituid {ObjectId} reference to the patient visit schema */
      patientvisituid : {type : Schema.ObjectId,ref : 'PatientVisit', required:true, index: true},
      /** orderdate{Date} - the datetime  of placing the  order */
      orderdate : {type : Date,required:true},
      /** orderdepartment {ObjectId} - the department from which the order is placed - based on patient department*/
      orderdepartmentuid : {type : Schema.ObjectId,ref : 'Department', required:true},
       /** ordertodepartment {ObjectId} - the department to which the order is placed */
      ordertodepartmentuid : {type : Schema.ObjectId,ref : 'Department', required:true},
      /** overrideorderfromdepartment {Boolean} - if the flag is overridden */
      overrideorderfromdept  : Boolean,
       /** careprovideruid {ObjectId} - the careprovider who or for whom (on behalf) the order is placed */
      careprovideruid : {type : Schema.ObjectId,ref : 'User'},
       /** ordercattype {String} - type can be LAB, RADIOLOGY, MEDICINE, SUPPLY, DENTAL, DF, DIET, ROOMRENT, OTHERS */
      ordercattype : {type : String, enum:['LAB', 'RADIOLOGY', 'MEDICINE', 'SUPPLY', 'DIET','DENTAL','DOCTORFEE','ROOMRENT', 'EQUIPMENT','OTHERS']},
      /** ordermodeuid {ObjectId}  - mode for the patient order - self, onbehalf, protocol , etc. */
      ordermodeuid : {type : Schema.ObjectId,ref : 'ReferenceValue'},
      /** ordercommuid {ObjectId}  - communication mode for the patient order (ORDCOM) in case of onbehalf - verbal, telephonic, written , etc. */
      ordercommuid : {type : Schema.ObjectId,ref : 'ReferenceValue'},
      /** ordertypeuid {ObjectId} - type of the paitent order - one time, continuous order, home medicine, patient own medicine */
      ordertypeuid : {type : Schema.ObjectId,ref : 'ReferenceValue'},
      /** ordernumber {String} - unique sequence number generated for the order */
      ordernumber : {type : String,  required:true},
      /** orderpriorityuid {ObjectId}  - priority for the patient order - routine , stat , etc. */
      orderpriorityuid : {type : Schema.ObjectId,ref : 'ReferenceValue'},
      /** userdepartmentuid {ObjectId} - the department logged in by the user while placing the order */
      userdepartmentuid : {type : Schema.ObjectId,ref : 'Department'},
      /** orderinguseruid {ObjectId} - the logged in user who placed the order */
      orderinguseruid : {type : Schema.ObjectId,ref : 'User', required:true},
      /** isautogenerated{Boolean} - whether the order is generated by the system - default false */
      isautogenerated : Boolean,
      /** entypeuid {ObjectId} - type of the encounter - referencedomain code : ENTYPE  */
      entypeuid: { type: Schema.ObjectId, ref: 'ReferenceValue' },
      /** warduid {ObjectId}  - filled up in the case of inpatients*/
      warduid : {type : Schema.ObjectId, ref : 'Ward'},
      /** bed {ObjectId}  - filled up in the case of inpatients*/
      beduid : {type : Schema.ObjectId, ref : 'Bed'},
       /** bedcategoryuid {ObjectId}  - filled up in the case of inpatients*/
      bedcategoryuid : {type : Schema.ObjectId, ref : 'ReferenceValue'},
      /** bedpackageuid {ObjectId} - reference to the bed package */
      bedpackageuid: { type: Schema.ObjectId, ref: 'OrderSet' },
      
      /** patientorderitems [PatientOrderItem] - embedded array for the patient order items */
      patientorderitems : [patientorderitem.PatientOrderItemSchema],
      /** invstoreuid {ObjectId} - reference to the inventorystore */
      invstoreuid : {type : Schema.ObjectId, ref: 'InventoryStore'},
      
      verify: Boolean,
      verifydate: { type: Date }
      
  });
  
 PatientOrderSchema.plugin(resuable);
 
 module.exports = mongoose.model('PatientOrder', PatientOrderSchema);